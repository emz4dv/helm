apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "current-chart.fullname" . }}
  labels:
    {{- include "current-chart.labels" . | nindent 4 }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.app.replicas }}
  selector:
    matchLabels:
      {{- include "current-chart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- if .Values.app.logs.annotations }}
          {{- toYaml .Values.app.logs.annotations | nindent 8 }}
        {{- end }}
      labels:
        app: {{ .Release.Name }}
        {{- include "current-chart.selectorLabels" . | nindent 8 }}
        checksum/config: {{ tpl (toYaml .Values) . | sha256sum | substr 0 20 }}
    spec:
      {{- if .Values.app.hostAliases.enabled }}
      hostAliases:
        {{- toYaml .Values.app.hostAliases.hosts | nindent 8 }}
      {{- end }}
      priorityClassName: {{ .Values.app.priority }}
      {{- if .Values.app.serviceaccount.enabled }}
      serviceAccountName: {{ .Values.app.serviceaccount.name }}
      {{- end }}
      imagePullSecrets:
        - name: {{ .Values.app.imagePullSecret }}
      {{- if .Values.app.jcp.enabled }}
      initContainers:
        - name: {{ .Chart.Name }}-init
          image: {{ .Values.app.image }}
          env:
            - name: JCP_LICENSE
              valueFrom:
                secretKeyRef:
                  name: jcp-license
                  key: license
                  optional: true
          volumeMounts:
            - name: {{ include "current-chart.fullname" . }}-java-volume
              mountPath: /tmp/java
            - name: {{ include "current-chart.fullname" . }}-config-volume
              mountPath: /tmp/certs
          command: [ 'sh', '{{ .Values.app.jcp.path }}/jcp_install.sh']
      {{- end }}
      containers:
        {{- if .Values.app.logs.fluentBit.enabled }}
        - name: fluent-bit
          image: {{ .Values.app.logs.fluentBit.image }}
          env:
            - name: FLUENT_ELASTICSEARCH_HOST
              value: "{{ .Values.app.logs.fluentBit.fluentd.host }}"
            - name: FLUENT_ELASTICSEARCH_PORT
              value: "{{ .Values.app.logs.fluentBit.fluentd.port }}"
            - name: APP_NAME
              value: {{ .Release.Name }}
            - name: APP_POD
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: APP_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: APP_NODENAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          imagePullPolicy: IfNotPresent
          ports:
            # Порты для сборщика метрик
            - name: fluentbit-http
              containerPort: 2020
              protocol: TCP
          volumeMounts:
            - name: fluentbit-config
              mountPath: /fluent-bit/etc/
            # Диск с логами из хэлм чарта приложения
            - name: {{ include "current-chart.fullname" . }}-logs-volume
              mountPath: /logs
        {{- end }}
        - name: {{ .Chart.Name }}
          image: {{ .Values.app.image }}
          imagePullPolicy: IfNotPresent
          {{- if .Values.app.resources.enabled }}
          resources:
            requests:
              memory: {{ .Values.app.resources.requests.memory | quote }}
              cpu: {{ .Values.app.resources.requests.cpu | quote }}
            limits:
              memory: {{ .Values.app.resources.limits.memory | quote }}
              cpu: {{ .Values.app.resources.limits.cpu | quote }}
          {{- end }}
          command: [ "java" ]
          args:
            {{- if .Values.app.extraArgs }}
              {{- toYaml .Values.app.extraArgs | nindent 12 }}
            {{- end }}
            - -Xmx$(MAX_MEM)
            - -Dspring.profiles.active=$(ACTIVE_PROFILES)
            {{- if .Values.app.debug }}
            - -Dlogging.level.root=debug
            {{- end }}
            {{- if .Values.app.jmx.enabled }}
            - -Dspring.jmx.enabled=true
            - -Djava.rmi.server.hostname=$(DOCKER_HOST_IP)
            - -Dcom.sun.management.jmxremote.port={{ .Values.app.jmx.port }}
            - -Dcom.sun.management.jmxremote.rmi.port={{ .Values.app.jmx.rmi.port }}
            - -Dcom.sun.management.jmxremote.local.only=false
            - -Dcom.sun.management.jmxremote.authenticate=false
            - -Dcom.sun.management.jmxremote.ssl=false
            {{- end }}
            - -Duser.timezone=Europe/Moscow
            - -Dtomcat.util.http.parser.HttpParser.requestTargetAllow=|{}
            - -Dfile.encoding=UTF-8
            - -Dsun.jnu.encoding=UTF-8
            - -jar
            - /app.jar
          {{- if .Values.app.probes.readinessProbe.enabled }}
          startupProbe:
             httpGet:
               path: {{ .Values.app.probes.startupProbe.path }}
               port: {{ .Values.app.ports.app }}
             initialDelaySeconds: {{ .Values.app.probes.startupProbe.initialDelaySeconds }}
             periodSeconds: {{ .Values.app.probes.startupProbe.periodSeconds }}
             failureThreshold: {{ .Values.app.probes.startupProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.app.probes.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.app.probes.readinessProbe.path }}
              port: {{ .Values.app.ports.app }}
            periodSeconds: {{ .Values.app.probes.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.app.probes.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.app.probes.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.app.probes.readinessProbe.failureThreshold }}
          {{- end }}
          ports:
            - containerPort: {{ .Values.app.ports.app }}
              name: http
            {{- if .Values.app.jmx.enabled }}
            - containerPort: {{ .Values.app.jmx.port }}
              name: jmx
            - containerPort: {{ .Values.app.jmx.rmi.port }}
              name: jmx-rmi
            {{- end }}
          volumeMounts:
            {{- if .Values.app.jcp.enabled }}
            - name: {{ include "current-chart.fullname" . }}-java-volume
              mountPath: /usr/lib/jvm/default-jvm
            - name: {{ include "current-chart.fullname" . }}-cryptopro-csp-volume
              mountPath: /var/opt/cprocsp/keys/root
            {{- end }}
            - name: {{ include "current-chart.fullname" . }}-config-volume
              mountPath: /bootstrap.yml
              subPath: bootstrap.yml
              readOnly: true
            - name: {{ include "current-chart.fullname" . }}-logs-volume
              mountPath: /logs
          env:
            - name: SERVER_PORT
              value: "{{ .Values.app.ports.app }}"
            - name: MANAGEMENT_SERVER_PORT
              value: "{{ .Values.app.ports.app }}"
            - name: ACTIVE_PROFILES
              valueFrom:
                configMapKeyRef:
                  name: {{ include "current-chart.fullname" . }}
                  key: profiles
            - name: MAX_MEM
              valueFrom:
                configMapKeyRef:
                  name: {{ include "current-chart.fullname" . }}
                  key: maxMem
      volumes:
        {{- if .Values.app.logs.fluentBit.enabled }}
        # configMap сборщика логов
        - name: fluentbit-config
          configMap:
            defaultMode: 420
            name: {{ include "current-chart.fullname" . }}-fb-conf
        {{- end }}
        - name: {{ include "current-chart.fullname" . }}-config-volume
          configMap:
            name: {{ include "current-chart.fullname" . }}
        {{- if .Values.app.jcp.enabled }}
        - name: {{ include "current-chart.fullname" . }}-cryptopro-csp-volume
          persistentVolumeClaim:
            claimName: cryptopro-csp-keys
        - name: {{ include "current-chart.fullname" . }}-java-volume
          emptyDir:
            medium: ""
        {{- end }}
        - name: {{ include "current-chart.fullname" . }}-logs-volume
          emptyDir:
            medium: ""
            {{- if .Values.app.logs.sizeLimit.enabled }}
            sizeLimit: {{ .Values.app.logs.sizeLimit.size }}
            {{- end }}
